# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
  find . -name "$1" 2>&1 | grep -v 'Permission denied'
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}


# whois a domain or a URL
function whois() {
  local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
  if [ -z $domain ] ; then
    domain=$1
  fi
  echo "Getting whois record for: $domain â€¦"

  # avoid recursion
  # this is the best whois server
  # strip extra fluff
  /usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}



# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
  if [ -f "$1" ] ; then
    local filename=$(basename "$1")
    local foldername="${filename%%.*}"
    local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
    local didfolderexist=false
    if [ -d "$foldername" ]; then
      didfolderexist=true
      read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
      echo
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        return
      fi
    fi
    mkdir -p "$foldername" && cd "$foldername"
    case $1 in
      *.tar.bz2) tar xjf "$fullpath" ;;
      *.tar.gz) tar xzf "$fullpath" ;;
      *.tar.xz) tar Jxvf "$fullpath" ;;
      *.tar.Z) tar xzf "$fullpath" ;;
      *.tar) tar xf "$fullpath" ;;
      *.taz) tar xzf "$fullpath" ;;
      *.tb2) tar xjf "$fullpath" ;;
      *.tbz) tar xjf "$fullpath" ;;
      *.tbz2) tar xjf "$fullpath" ;;
      *.tgz) tar xzf "$fullpath" ;;
      *.txz) tar Jxvf "$fullpath" ;;
      *.zip) unzip "$fullpath" ;;
      *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


#################################################
# Cleanup git branches
#################################################

# first remove conflicting alias (if it exists, e.g. from a git-alias plugin)
if alias gbda > /dev/null 2>&1; then
  unalias gbda
fi
# Now the function "alias"
gbda () {
  echo "pruning..."
  git remote prune origin
  echo "deleting orphaned local branches..."
  git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | xargs git branch -D
}


#################################################
# Better diff
#################################################

# use diff-so-fancy for diffs
# NOTE: this overrides native `diff` command
alias diff_native='command diff'
diff () {
  command diff -burN "$*" | diff-so-fancy
}

#################################################
# Safe delete
#################################################

alias rm_native='command rm'
rm () {
  echo "Using aliased rm -> macOS trash || trash-cli..."
  echo "Use rm_native for native rm"

  # Check if trash tool is already installed, install if not
  if ! command -v trash >/dev/null; then
    echo "trash-cli not installed. Installing..."
    npm install --global trash-cli
  fi

  # Filter out all flags except for -v
  args=()
  for arg in "$@"; do
    if [[ "$arg" == -* ]]; then
      if [[ "$arg" == *v* ]]; then
        args+=("-v")
      else
        echo "Ignoring unsupported flag(s) in: $arg"
      fi
    else
      args+=("$arg")
    fi
  done

  trash "${args[@]}"
}
